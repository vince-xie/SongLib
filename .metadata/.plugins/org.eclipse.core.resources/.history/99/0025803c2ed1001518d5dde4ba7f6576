package model;

import java.util.*;
import java.io.*;

public class SongList {
	
	private ArrayList<Song> songList;
	
	/**
	 * Creates a new instance of an empty SongList
	 */
	public SongList(){
		songList = new ArrayList<Song>();
	}
	
	/**
	 * Creates a new instance of a SongList using an ArrayList of Songs
	 * 
	 * @param songList ArrayList of Songs
	 */
	public SongList(ArrayList<Song> songList){
		this.songList = songList;
	}
	
	/**
	 * Get a Song from the SongList
	 * 
	 * @param index index of the song in the list
	 * @return song at the index in the list
	 */
	public Song getSongFromListIndex(int index){
		if(index >= songList.size() || index < 0){
			return null;
		}
		return songList.get(index);
	}
	
	/**
	 * Add a song to the SongList
	 * 
	 * @param name name of the song
	 * @param album album of the song
	 * @param artist artist of the song
	 * @param year year of the song
	 * @return index if successful, -1 if song already in list
	 */
	public int addSongToList(Song song){
		for(int i = 0; i < songList.size(); i++){
			if(song.equals(songList.get(i))){
				return -1;
			} else if (song.compareTo(songList.get(i)) == 0){
				if(song.getArtist().compareToIgnoreCase(songList.get(i).getArtist()) > 0){
					continue;
				}
				songList.add(i, song);
				return i;
			} else if(song.compareTo(songList.get(i)) < 0){
				songList.add(i, song);
				return i;
			}
		}
		songList.add(song);
		return songList.size() - 1;	
	}
	
	/**
	 * Returns the index of a song if the song is contained in songList
	 * @param s
	 * @return i if the song is found, -1 otherwise
	 */
	public int getSongIndex(Song s) {
		return Collections.binarySearch(songList, s);
	}
	
	/**
	 * @return the song list of songs
	 */
	public ArrayList<Song> getSongList() {
		return songList;
	}
	
	/**
	 * Deletes a song from the SongList
	 * 
	 * @param index of the song
	 */
	public void deleteSongFromList(int index){
		if(index < 0 || index >= songList.size()){
			return;
		}
		songList.remove(index);
	}
	
	/**
	 * Prints out the contents of the song list. For testing purposes.
	 */
	public void printList(){
		for(int i = 0; i < songList.size(); i++){
			System.out.println(songList.get(i).toCSV());
		}
		System.out.println();
	}
	
	/**
	 * Writes the list of songs to a file
	 * @param list of songs
	 * @throws FileNotFoundException
	 * @throws UnsupportedEncodingException
	 */
	public void writeFile(ArrayList<Song> songs) throws FileNotFoundException, UnsupportedEncodingException {
		Writer writer = null;
		try {
		    writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("song-list.csv"), "utf-8"));
		    for(Song song : songs){
				writer.write(song.toCSV() + "\n");
			}
		}
		catch (IOException ex) {}
		finally {
		   try {
			   writer.close();
		   } 
		   catch (Exception ex) {}
		}
	}
	
	/**
	 * Retrieves songs from a file (to be used at application start-up)
	 * @param fileName name of the file containing pre-existing songs
	 */
	public void getSongsFromFile(String fileName) {
		File file = new File(fileName);
		try{
			@SuppressWarnings("resource")
			Scanner scan = new Scanner(file);
			String line;
			while (scan.hasNext()) {
				line = scan.next();
				System.out.println(line);
				String[] info = line.split(",");
				String name = info[1].substring(1, info[1].length() - 1);
				String artist = info[2].substring(1, info[2].length() - 1);
				String album = info[3].substring(1, info[3].length() - 1);
				String year = info[4].substring(1, info[4].length() - 1);
				Song song = new Song(name, album, artist, year);
				addSongToList(song);
			}
		}
		catch(FileNotFoundException e){
			System.out.println("No pre-existing file!");
			//e.printStackTrace();
		}
	}
}
